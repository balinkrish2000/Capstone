version: 2.1

commands:
   rollback-deployment:
    description: Rollback deployment
    steps:
      - run:
          name: rollback cluster
          when: on_fail
          command: |
            kubectl rollout undo deployments/capstone
      - run:
         name: check rollback details
         when: on_fail
         command: |
            kubectl get deploy capstone
            echo '###############'
            kubectl get rs
            echo '###############'
            kubectl get pods
            echo '###############'
            kubectl describe pods
            echo '###############'
            kubectl describe services/capstone
      - run:
          name: check rollback status
          when: on_fail
          command: |
            aws eks update-kubeconfig --name capstone
            kubectl get svc capstone -o json | jq .status.loadBalancer.ingress[].hostname >> bip.txt
            export API_IP=$(sed -e 's/^"//' -e 's/"$//' < bip.txt)
            export API_URL="http://${API_IP}:80"
            echo "${API_URL}"
            curl "${API_URL}"

jobs:
  build-app:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - restore_cache:
         keys: [app-build]
      - run:
         name: Install dependencies
         command: |
           sudo apt-get update
           sudo apt-get install -y nginx --no-install-recommends
      - run:
         name: copy project files
         command: |
            sudo cp ./config/nginx.conf /etc/nginx/nginx.conf
            sudo cp -r ./www /www
      - run:
         name: build app
         command: |
           sudo service nginx start
      - run:
         name: test app
         command: |
           curl http://localhost:80/
      - save_cache:
         paths: [node_modules]
         key: app-build
         
  lint-app:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
         name: install dependencies
         command: |
            docker pull hadolint/hadolint
      - run:
         name: lint on app
         command: |
            docker run --rm --interactive hadolint/hadolint < Dockerfile
            
  build-n-push-image:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - run:
         name: install curl
         command: |
            apk add --update curl
      - setup_remote_docker
      - run:
         name: build docker image
         command: |
            docker build --tag=capstone:${CIRCLE_WORKFLOW_ID:0:7} .
            docker image ls
      - run:
         name: run docker image
         command: |
            docker run --detach --publish=80:80 --name=captsone capstone:${CIRCLE_WORKFLOW_ID:0:7}
      - run:
         name: push to dockerhub
         command: |
            docker login -u balinkrish2000 -p 4e57c8ff-c3df-4820-a380-9d3762b3b433
            docker tag capstone:${CIRCLE_WORKFLOW_ID:0:7} balinkrish2000/capstone:${CIRCLE_WORKFLOW_ID:0:7}
            docker push balinkrish2000/capstone:${CIRCLE_WORKFLOW_ID:0:7}
   
  get-cluster-details:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
         name: get cluster name
         command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`EksClusterName\`].Value" \
              --no-paginate --output text >> .circleci/files/eksclustername.txt
            cat .circleci/files/eksclustername.txt
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/project/.circleci/files
          paths:
            - .
   
  create-eks-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/project/.circleci/files
      - run:
         name: create eks cluster
         command: |
            cat ~/project/.circleci/files/eksclustername.txt
            export EksClusterName=$(tail -n 1 ~/project/.circleci/files/eksclustername.txt)
            export ExistingEksClusterName="${EksClusterName}"
            echo ExistingEksClusterName: "${EksClusterName}"
            
            if [[ "${ExistingEksClusterName}" != "Capstone-Cluster" ]]
            then
               aws cloudformation deploy \
                 --template-file .circleci/files/ekscluster.yml \
                 --tags project=capstone \
                 --stack-name "capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
                 --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            fi
         no_output_timeout: 20m
         
  deploy-app-to-cluster:
    docker:
      - image: cimg/base:2021.04
    steps:
      - attach_workspace:
          at: ~/project/.circleci/files
      - run:
         name: install dependencies
         command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client
      - run:
         name: configure kube
         command: |
            aws eks update-kubeconfig --name capstone
            kubectl get nodes
      - run:
         name: Deploy App
         command: |
            cat ~/project/.circleci/files/eksclustername.txt
            export EksClusterName=$(tail -n 1 ~/project/.circleci/files/eksclustername.txt)
            export ExistingEksClusterName="${EksClusterName}"
            echo ExistingEksClusterName: "${EksClusterName}"
            
            if [[ "${ExistingEksClusterName}" == "Capstone-Cluster" ]]
            then
               kubectl set image deployments/capstone capstone=balinkrish2000/capstone:${CIRCLE_WORKFLOW_ID:0:7}
            else
               kubectl create deploy capstone --image=balinkrish2000/capstone:${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - run:
         name: check deployment status
         command: |
            kubectl rollout status deployments/capstone
            if [[ "${ExistingEksClusterName}" != "Capstone-Cluster" ]]
            then
               kubectl expose deployment/capstone --port 80 --type=LoadBalancer
            fi
      - run:
         name: check deployment details
         command: |
            kubectl get deploy capstone
            echo '###############'
            kubectl get rs
            echo '###############'
            kubectl get pods
            echo '###############'
            kubectl describe pods
            echo '###############'
            kubectl describe services/capstone
      - rollback-deployment
            
  verify-app:
    docker:
      - image: cimg/base:2021.04
    steps:
      - run:
         name: install dependencies
         command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client
      - run: 
         name: check app
         command: |
            aws eks update-kubeconfig --name capstone
            kubectl get svc capstone -o json | jq .status.loadBalancer.ingress[].hostname >> ip.txt
            export API_IP=$(sed -e 's/^"//' -e 's/"$//' < ip.txt)
            export API_URL="http://${API_IP}:80"
            echo "${API_URL}"
            curl "${API_URL}"
         no_output_timeout: 15s
      - rollback-deployment
         
            
  test-app:
    docker:
      - image: cimg/base:2021.04
    steps:
      - attach_workspace:
          at: ~/project/.circleci/files
      - run:
         name: install dependencies
         command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client
      - run: 
         name: check app
         command: |
            cat ~/project/.circleci/files/eksclustername.txt
            export EksClusterName=$(tail -n 1 ~/project/.circleci/files/eksclustername.txt)
            export ExistingEksClusterName="${EksClusterName}"
            echo ExistingEksClusterName: "${EksClusterName}"
         
            aws eks update-kubeconfig --name capstone
            kubectl get deploy capstone
            echo '###############'
            kubectl get rs
            echo '###############'
            kubectl get pods
            echo '###############'
            kubectl describe pods
            echo '###############'
            kubectl describe services/capstone
            kubectl get svc capstone -o json | jq .status.loadBalancer.ingress[].hostname >> ip.txt
            export API_IP=$(sed -e 's/^"//' -e 's/"$//' < ip.txt)
            export API_URL="http://${API_IP}:80"
            echo "${API_URL}"
            curl "${API_URL}"
         no_output_timeout: 1m
      - rollback-deployment
            
workflows:
  default:
    jobs:
      - build-app
      - lint-app
      - get-cluster-details
      - build-n-push-image:
         requires: [build-app, lint-app]
      - create-eks-cluster:
         requires: [get-cluster-details]
      - deploy-app-to-cluster:
         requires: [build-n-push-image, create-eks-cluster]
      - verify-app:
         requires: [deploy-app-to-cluster]
      # - test-app:
      #    requires: [get-cluster-details]